
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jul 17 17:47:41 CST 2016
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sun Jul 17 17:47:41 CST 2016
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\003\003\000\002\002\004\000\002\004" +
    "\003\000\002\004\004\000\002\005\010\000\002\005\012" +
    "\000\002\005\005\000\002\006\004\000\002\006\002\000" +
    "\002\006\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\004\000\002\010\006\000\002\010\010\000\002\010" +
    "\006\000\002\011\014\000\002\012\005\000\002\012\002" +
    "\000\002\012\003\000\002\013\005\000\002\014\003\000" +
    "\002\014\002\000\002\014\005\000\002\015\004\000\002" +
    "\015\005\000\002\015\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\010\000\002\016\012\000\002\016\006\000" +
    "\002\016\011\000\002\016\003\000\002\016\003\000\002" +
    "\016\004\000\002\016\007\000\002\016\004\000\002\016" +
    "\004\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\004\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\004\000\002" +
    "\016\005\000\002\016\003\000\002\024\007\000\002\024" +
    "\007\000\002\024\007\000\002\023\005\000\002\023\007" +
    "\000\002\022\005\000\002\022\005\000\002\021\007\000" +
    "\002\021\011\000\002\021\007\000\002\021\011\000\002" +
    "\017\004\000\002\017\003\000\002\020\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\004\007\001\002\000\006\002\001\004" +
    "\007\001\002\000\004\002\242\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\006\003\011\055\010\001\002\000" +
    "\006\011\014\050\013\001\002\000\004\043\012\001\002" +
    "\000\006\002\ufffb\004\ufffb\001\002\000\010\003\017\051" +
    "\ufff9\056\021\001\002\000\004\055\015\001\002\000\004" +
    "\050\016\001\002\000\010\003\017\051\ufff9\056\021\001" +
    "\002\000\004\043\236\001\002\000\010\003\ufff8\051\ufff8" +
    "\056\ufff8\001\002\000\006\044\030\045\031\001\002\000" +
    "\010\003\017\051\026\056\021\001\002\000\010\003\ufff7" +
    "\051\ufff7\056\ufff7\001\002\000\010\003\ufff6\051\ufff6\056" +
    "\ufff6\001\002\000\010\003\ufffa\051\ufffa\056\ufffa\001\002" +
    "\000\004\043\027\001\002\000\006\002\ufffc\004\ufffc\001" +
    "\002\000\006\003\230\055\227\001\002\000\010\042\uffef" +
    "\046\uffef\056\033\001\002\000\006\042\037\046\040\001" +
    "\002\000\004\044\035\001\002\000\006\042\uffee\046\uffee" +
    "\001\002\000\004\055\036\001\002\000\006\042\uffed\046" +
    "\uffed\001\002\000\004\056\033\001\002\000\004\044\041" +
    "\001\002\000\004\055\042\001\002\000\004\050\043\001" +
    "\002\000\040\003\061\007\052\012\062\017\047\020\060" +
    "\024\063\025\064\027\050\041\045\045\053\050\055\052" +
    "\054\053\056\054\051\056\057\001\002\000\054\003\uffe2" +
    "\005\uffe2\006\uffe2\010\uffe2\014\uffe2\015\uffe2\016\uffe2\022" +
    "\uffe2\030\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\040\uffe2\042\uffe2\043\uffe2\046\uffe2\047\uffe2\051" +
    "\uffe2\001\002\000\040\003\061\007\052\012\062\017\047" +
    "\020\060\024\063\025\064\027\050\041\045\045\053\050" +
    "\055\052\054\053\056\054\051\056\057\001\002\000\026" +
    "\030\074\032\072\033\076\034\070\035\071\036\073\037" +
    "\100\040\075\047\077\051\223\001\002\000\040\003\061" +
    "\007\052\012\062\017\047\020\060\024\063\025\064\027" +
    "\050\041\045\045\053\050\055\052\054\053\056\054\051" +
    "\056\057\001\002\000\040\003\061\007\052\012\062\017" +
    "\047\020\060\024\063\025\064\027\050\041\045\045\053" +
    "\050\055\052\054\053\056\054\051\056\057\001\002\000" +
    "\054\003\uffe6\005\uffe6\006\uffe6\010\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\022\uffe6\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\042\uffe6\043\uffe6\046\uffe6" +
    "\047\uffe6\051\uffe6\001\002\000\040\003\061\007\052\012" +
    "\062\017\047\020\060\024\063\025\064\027\050\041\045" +
    "\045\053\050\055\052\054\053\056\054\051\056\057\001" +
    "\002\000\040\003\061\007\052\012\062\017\047\020\060" +
    "\024\063\025\064\027\050\041\045\045\053\050\055\052" +
    "\054\053\056\054\051\056\057\001\002\000\054\003\uffe4" +
    "\005\uffe4\006\uffe4\010\uffe4\014\uffe4\015\uffe4\016\uffe4\022" +
    "\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\042\uffe4\043\uffe4\046\uffe4\047\uffe4\051" +
    "\uffe4\001\002\000\040\003\167\007\052\012\062\017\047" +
    "\020\060\024\063\025\064\027\050\041\045\045\053\050" +
    "\055\052\054\053\056\054\051\056\057\001\002\000\054" +
    "\003\uffe5\005\uffe5\006\uffe5\010\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\022\uffe5\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\042\uffe5\043\uffe5\046\uffe5\047" +
    "\uffe5\051\uffe5\001\002\000\060\003\uffe3\005\uffe3\006\uffe3" +
    "\010\uffe3\014\uffe3\015\uffe3\016\uffe3\022\uffe3\026\161\030" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\042\uffe3\043\uffe3\045\160\046\uffe3\047\uffe3\051" +
    "\uffe3\001\002\000\040\003\061\007\052\012\062\017\047" +
    "\020\060\024\063\025\064\027\050\041\045\045\053\050" +
    "\055\052\054\053\056\054\051\056\057\001\002\000\054" +
    "\003\uffcd\005\uffcd\006\uffcd\010\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\022\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\042\uffcd\043\uffcd\046\uffcd\047" +
    "\uffcd\051\uffcd\001\002\000\004\056\126\001\002\000\004" +
    "\055\125\001\002\000\040\003\061\007\052\012\062\017" +
    "\047\020\060\024\063\025\064\027\050\041\045\045\053" +
    "\050\055\052\054\053\056\054\051\056\057\001\002\000" +
    "\054\003\uffdd\005\uffdd\006\uffdd\010\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\022\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd\046\uffdd" +
    "\047\uffdd\051\uffdd\001\002\000\054\003\uffdc\005\uffdc\006" +
    "\uffdc\010\uffdc\014\uffdc\015\uffdc\016\uffdc\022\uffdc\030\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\042\uffdc\043\uffdc\046\uffdc\047\uffdc\051\uffdc\001\002" +
    "\000\054\003\uffd8\005\uffd8\006\uffd8\010\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\022\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8\046" +
    "\uffd8\047\uffd8\051\uffd8\001\002\000\040\003\061\007\052" +
    "\012\062\017\047\020\060\024\063\025\064\027\050\041" +
    "\045\045\053\050\055\052\054\053\056\054\051\056\057" +
    "\001\002\000\040\003\061\007\052\012\062\017\047\020" +
    "\060\024\063\025\064\027\050\041\045\045\053\050\055" +
    "\052\054\053\056\054\051\056\057\001\002\000\040\003" +
    "\061\007\052\012\062\017\047\020\060\024\063\025\064" +
    "\027\050\041\045\045\053\050\055\052\054\053\056\054" +
    "\051\056\057\001\002\000\040\003\061\007\052\012\062" +
    "\017\047\020\060\024\063\025\064\027\050\041\045\045" +
    "\053\050\055\052\054\053\056\054\051\056\057\001\002" +
    "\000\040\003\061\007\052\012\062\017\047\020\060\024" +
    "\063\025\064\027\050\041\045\045\053\050\055\052\054" +
    "\053\056\054\051\056\057\001\002\000\004\056\114\001" +
    "\002\000\040\003\061\007\052\012\062\017\047\020\060" +
    "\024\063\025\064\027\050\041\045\045\053\050\055\052" +
    "\054\053\056\054\051\056\057\001\002\000\004\055\102" +
    "\001\002\000\040\003\061\007\052\012\062\017\047\020" +
    "\060\024\063\025\064\027\050\041\045\045\053\050\055" +
    "\052\054\053\056\054\051\056\057\001\002\000\046\003" +
    "\uffd2\005\uffd2\006\uffd2\010\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\022\uffd2\032\072\033\076\034\070\035\071\040\075\042" +
    "\uffd2\043\uffd2\046\uffd2\047\uffd2\051\uffd2\001\002\000\004" +
    "\040\103\001\002\000\004\056\104\001\002\000\004\045" +
    "\105\001\002\000\044\003\061\007\052\012\062\017\047" +
    "\020\060\024\063\025\064\027\050\041\045\042\uffeb\045" +
    "\053\046\uffeb\050\055\052\054\053\056\054\051\056\057" +
    "\001\002\000\030\030\074\032\072\033\076\034\070\035" +
    "\071\036\073\037\100\040\075\042\uffec\046\uffec\047\077" +
    "\001\002\000\006\042\110\046\111\001\002\000\040\003" +
    "\061\007\052\012\062\017\047\020\060\024\063\025\064" +
    "\027\050\041\045\045\053\050\055\052\054\053\056\054" +
    "\051\056\057\001\002\000\054\003\uffe0\005\uffe0\006\uffe0" +
    "\010\uffe0\014\uffe0\015\uffe0\016\uffe0\022\uffe0\030\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\042\uffe0\043\uffe0\046\uffe0\047\uffe0\051\uffe0\001\002\000" +
    "\030\030\074\032\072\033\076\034\070\035\071\036\073" +
    "\037\100\040\075\042\uffea\046\uffea\047\077\001\002\000" +
    "\054\003\uffd4\005\uffd4\006\uffd4\010\uffd4\014\uffd4\015\uffd4" +
    "\016\uffd4\022\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\046\uffd4" +
    "\047\uffd4\051\uffd4\001\002\000\004\045\115\001\002\000" +
    "\044\003\061\007\052\012\062\017\047\020\060\024\063" +
    "\025\064\027\050\041\045\042\uffeb\045\053\046\uffeb\050" +
    "\055\052\054\053\056\054\051\056\057\001\002\000\006" +
    "\042\110\046\117\001\002\000\054\003\uffe1\005\uffe1\006" +
    "\uffe1\010\uffe1\014\uffe1\015\uffe1\016\uffe1\022\uffe1\030\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040" +
    "\uffe1\042\uffe1\043\uffe1\046\uffe1\047\uffe1\051\uffe1\001\002" +
    "\000\046\003\uffd1\005\uffd1\006\uffd1\010\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\022\uffd1\032\072\033\076\034\070\035\071" +
    "\040\075\042\uffd1\043\uffd1\046\uffd1\047\uffd1\051\uffd1\001" +
    "\002\000\046\003\uffd0\005\uffd0\006\uffd0\010\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\022\uffd0\032\072\033\076\034\070\035" +
    "\071\040\075\042\uffd0\043\uffd0\046\uffd0\047\uffd0\051\uffd0" +
    "\001\002\000\054\003\uffd7\005\uffd7\006\uffd7\010\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\022\uffd7\030\uffd7\032\uffd7\033\076" +
    "\034\uffd7\035\071\036\uffd7\037\uffd7\040\uffd7\042\uffd7\043" +
    "\uffd7\046\uffd7\047\uffd7\051\uffd7\001\002\000\054\003\uffd5" +
    "\005\uffd5\006\uffd5\010\uffd5\014\uffd5\015\uffd5\016\uffd5\022" +
    "\uffd5\030\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\042\uffd5\043\uffd5\046\uffd5\047\uffd5\051" +
    "\uffd5\001\002\000\054\003\uffd6\005\uffd6\006\uffd6\010\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\022\uffd6\030\uffd6\032\uffd6\033" +
    "\076\034\uffd6\035\071\036\uffd6\037\uffd6\040\uffd6\042\uffd6" +
    "\043\uffd6\046\uffd6\047\uffd6\051\uffd6\001\002\000\054\003" +
    "\uffd9\005\uffd9\006\uffd9\010\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\022\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\042\uffd9\043\uffd9\046\uffd9\047\uffd9" +
    "\051\uffd9\001\002\000\004\044\130\001\002\000\054\003" +
    "\uffdb\005\uffdb\006\uffdb\010\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\022\uffdb\030\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb\046\uffdb\047\uffdb" +
    "\051\uffdb\001\002\000\004\055\131\001\002\000\010\010" +
    "\133\026\134\042\132\001\002\000\004\056\126\001\002" +
    "\000\040\003\061\007\052\012\062\017\047\020\060\024" +
    "\063\025\064\027\050\041\045\045\053\050\055\052\054" +
    "\053\056\054\051\056\057\001\002\000\040\003\061\007" +
    "\052\012\062\017\047\020\060\024\063\025\064\027\050" +
    "\041\045\045\053\050\055\052\054\053\056\054\051\056" +
    "\057\001\002\000\030\010\136\030\074\032\072\033\076" +
    "\034\070\035\071\036\073\037\100\040\075\042\137\047" +
    "\077\001\002\000\040\003\061\007\052\012\062\017\047" +
    "\020\060\024\063\025\064\027\050\041\045\045\053\050" +
    "\055\052\054\053\056\054\051\056\057\001\002\000\004" +
    "\056\126\001\002\000\054\003\uffc2\005\uffc2\006\uffc2\010" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\022\uffc2\030\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\042" +
    "\uffc2\043\uffc2\046\uffc2\047\uffc2\051\uffc2\001\002\000\054" +
    "\003\uffc4\005\uffc4\006\uffc4\010\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\022\uffc4\030\074\032\072\033\076\034\070\035\071" +
    "\036\073\037\100\040\075\042\uffc4\043\uffc4\046\uffc4\047" +
    "\077\051\uffc4\001\002\000\054\003\uffc5\005\uffc5\006\uffc5" +
    "\010\uffc5\014\uffc5\015\uffc5\016\uffc5\022\uffc5\030\074\032" +
    "\072\033\076\034\070\035\071\036\073\037\100\040\075" +
    "\042\uffc5\043\uffc5\046\uffc5\047\077\051\uffc5\001\002\000" +
    "\054\003\uffc3\005\uffc3\006\uffc3\010\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\022\uffc3\030\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\037\uffc3\040\uffc3\042\uffc3\043\uffc3\046\uffc3" +
    "\047\uffc3\051\uffc3\001\002\000\026\022\145\030\074\032" +
    "\072\033\076\034\070\035\071\036\073\037\100\040\075" +
    "\047\077\001\002\000\004\056\146\001\002\000\004\044" +
    "\153\001\002\000\006\021\uffc0\056\uffc0\001\002\000\006" +
    "\021\152\056\146\001\002\000\006\021\uffc1\056\uffc1\001" +
    "\002\000\054\003\uffda\005\uffda\006\uffda\010\uffda\014\uffda" +
    "\015\uffda\016\uffda\022\uffda\030\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\042\uffda\043\uffda" +
    "\046\uffda\047\uffda\051\uffda\001\002\000\004\055\154\001" +
    "\002\000\004\023\155\001\002\000\040\003\061\007\052" +
    "\012\062\017\047\020\060\024\063\025\064\027\050\041" +
    "\045\045\053\050\055\052\054\053\056\054\051\056\057" +
    "\001\002\000\026\030\074\032\072\033\076\034\070\035" +
    "\071\036\073\037\100\040\075\043\157\047\077\001\002" +
    "\000\006\021\uffbf\056\uffbf\001\002\000\044\003\061\007" +
    "\052\012\062\017\047\020\060\024\063\025\064\027\050" +
    "\041\045\042\uffeb\045\053\046\uffeb\050\055\052\054\053" +
    "\056\054\051\056\057\001\002\000\040\003\163\007\052" +
    "\012\062\017\047\020\060\024\063\025\064\027\050\041" +
    "\045\045\053\050\055\052\054\053\056\054\051\056\057" +
    "\001\002\000\054\003\uffc7\005\uffc7\006\uffc7\010\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\022\uffc7\030\074\032\072\033\076" +
    "\034\070\035\071\036\073\037\100\040\075\042\uffc7\043" +
    "\uffc7\046\uffc7\047\077\051\uffc7\001\002\000\054\003\uffcd" +
    "\005\uffcd\006\uffcd\010\uffcd\014\uffcd\015\uffcd\016\uffcd\022" +
    "\uffcd\030\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\042\uffcd\043\uffcd\046\uffcd\047\uffcd\051" +
    "\uffcd\001\002\000\006\042\110\046\165\001\002\000\054" +
    "\003\uffdf\005\uffdf\006\uffdf\010\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\022\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\042\uffdf\043\uffdf\046\uffdf\047" +
    "\uffdf\051\uffdf\001\002\000\026\030\074\032\072\033\076" +
    "\034\070\035\071\036\073\037\100\040\075\043\201\047" +
    "\077\001\002\000\026\030\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\043\174\047\uffcd\001" +
    "\002\000\042\003\061\007\052\012\062\017\047\020\060" +
    "\024\063\025\064\027\050\041\045\045\053\050\055\051" +
    "\172\052\054\053\056\054\051\056\057\001\002\000\026" +
    "\030\074\032\072\033\076\034\070\035\071\036\073\037" +
    "\100\040\075\043\173\047\077\001\002\000\054\003\uffc9" +
    "\005\uffc9\006\uffc9\010\uffc9\014\uffc9\015\uffc9\016\uffc9\022" +
    "\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\042\uffc9\043\uffc9\046\uffc9\047\uffc9\051" +
    "\uffc9\001\002\000\042\003\uffe8\007\uffe8\012\uffe8\017\uffe8" +
    "\020\uffe8\024\uffe8\025\uffe8\027\uffe8\041\uffe8\045\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\056\uffe8\001\002" +
    "\000\042\003\175\007\052\012\062\017\047\020\060\024" +
    "\063\025\064\027\050\041\045\045\053\050\055\051\uffe7" +
    "\052\054\053\056\054\051\056\057\001\002\000\026\030" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\043\200\047\uffcd\001\002\000\042\003\061\007" +
    "\052\012\062\017\047\020\060\024\063\025\064\027\050" +
    "\041\045\045\053\050\055\051\177\052\054\053\056\054" +
    "\051\056\057\001\002\000\054\003\uffc8\005\uffc8\006\uffc8" +
    "\010\uffc8\014\uffc8\015\uffc8\016\uffc8\022\uffc8\030\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\042\uffc8\043\uffc8\046\uffc8\047\uffc8\051\uffc8\001\002\000" +
    "\042\003\uffe7\007\uffe7\012\uffe7\017\uffe7\020\uffe7\024\uffe7" +
    "\025\uffe7\027\uffe7\041\uffe7\045\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\056\uffe7\001\002\000\042\003\uffe9" +
    "\007\uffe9\012\uffe9\017\uffe9\020\uffe9\024\uffe9\025\uffe9\027" +
    "\uffe9\041\uffe9\045\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\056\uffe9\001\002\000\026\030\074\032\072\033" +
    "\076\034\070\035\071\036\073\037\100\040\075\046\203" +
    "\047\077\001\002\000\054\003\uffce\005\uffce\006\uffce\010" +
    "\uffce\014\uffce\015\uffce\016\uffce\022\uffce\030\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\042" +
    "\uffce\043\uffce\046\uffce\047\uffce\051\uffce\001\002\000\026" +
    "\016\205\030\074\032\072\033\076\034\070\035\071\036" +
    "\073\037\100\040\075\047\077\001\002\000\040\003\061" +
    "\007\052\012\062\017\047\020\060\024\063\025\064\027" +
    "\050\041\045\045\053\050\055\052\054\053\056\054\051" +
    "\056\057\001\002\000\026\005\207\030\074\032\072\033" +
    "\076\034\070\035\071\036\073\037\100\040\075\047\077" +
    "\001\002\000\040\003\061\007\052\012\062\017\047\020" +
    "\060\024\063\025\064\027\050\041\045\045\053\050\055" +
    "\052\054\053\056\054\051\056\057\001\002\000\026\006" +
    "\211\030\074\032\072\033\076\034\070\035\071\036\073" +
    "\037\100\040\075\047\077\001\002\000\054\003\uffde\005" +
    "\uffde\006\uffde\010\uffde\014\uffde\015\uffde\016\uffde\022\uffde" +
    "\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\042\uffde\043\uffde\046\uffde\047\uffde\051\uffde" +
    "\001\002\000\054\003\uffcf\005\uffcf\006\uffcf\010\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\022\uffcf\030\074\032\072\033\076" +
    "\034\070\035\071\036\073\037\100\040\075\042\uffcf\043" +
    "\uffcf\046\uffcf\047\077\051\uffcf\001\002\000\030\003\215" +
    "\014\214\030\074\032\072\033\076\034\070\035\071\036" +
    "\073\037\100\040\075\047\077\001\002\000\040\003\061" +
    "\007\052\012\062\017\047\020\060\024\063\025\064\027" +
    "\050\041\045\045\053\050\055\052\054\053\056\054\051" +
    "\056\057\001\002\000\040\003\061\007\052\012\062\017" +
    "\047\020\060\024\063\025\064\027\050\041\045\045\053" +
    "\050\055\052\054\053\056\054\051\056\057\001\002\000" +
    "\026\015\217\030\074\032\072\033\076\034\070\035\071" +
    "\036\073\037\100\040\075\047\077\001\002\000\054\003" +
    "\uffca\005\uffca\006\uffca\010\uffca\014\uffca\015\uffca\016\uffca" +
    "\022\uffca\030\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036" +
    "\uffca\037\uffca\040\uffca\042\uffca\043\uffca\046\uffca\047\uffca" +
    "\051\uffca\001\002\000\030\003\222\015\221\030\074\032" +
    "\072\033\076\034\070\035\071\036\073\037\100\040\075" +
    "\047\077\001\002\000\054\003\uffcc\005\uffcc\006\uffcc\010" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\022\uffcc\030\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042" +
    "\uffcc\043\uffcc\046\uffcc\047\uffcc\051\uffcc\001\002\000\054" +
    "\003\uffcb\005\uffcb\006\uffcb\010\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\022\uffcb\030\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb\046\uffcb\047" +
    "\uffcb\051\uffcb\001\002\000\004\043\224\001\002\000\010" +
    "\003\ufff1\051\ufff1\056\ufff1\001\002\000\054\003\uffd3\005" +
    "\uffd3\006\uffd3\010\uffd3\014\uffd3\015\uffd3\016\uffd3\022\uffd3" +
    "\030\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037" +
    "\uffd3\040\uffd3\042\uffd3\043\uffd3\046\uffd3\047\uffd3\051\uffd3" +
    "\001\002\000\006\042\ufff0\046\ufff0\001\002\000\006\026" +
    "\233\043\232\001\002\000\004\043\231\001\002\000\010" +
    "\003\ufff2\051\ufff2\056\ufff2\001\002\000\010\003\ufff4\051" +
    "\ufff4\056\ufff4\001\002\000\040\003\061\007\052\012\062" +
    "\017\047\020\060\024\063\025\064\027\050\041\045\045" +
    "\053\050\055\052\054\053\056\054\051\056\057\001\002" +
    "\000\026\030\074\032\072\033\076\034\070\035\071\036" +
    "\073\037\100\040\075\043\235\047\077\001\002\000\010" +
    "\003\ufff3\051\ufff3\056\ufff3\001\002\000\010\003\ufff5\051" +
    "\ufff5\056\ufff5\001\002\000\010\003\017\051\240\056\021" +
    "\001\002\000\004\043\241\001\002\000\006\002\ufffd\004" +
    "\ufffd\001\002\000\004\002\000\001\002\000\006\002\ufffe" +
    "\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\010\003\004\004\003\005\005\001\001\000" +
    "\004\005\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\236\007\017\010\022\011\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\021\007\017\010\022\011\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\024\010" +
    "\022\011\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\031\013\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\045\022\043\023\065\024\064\001\001\000\002\001\001" +
    "\000\012\016\224\022\043\023\065\024\064\001\001\000" +
    "\002\001\001\000\012\016\212\022\043\023\065\024\064" +
    "\001\001\000\012\016\211\022\043\023\065\024\064\001" +
    "\001\000\002\001\001\000\012\016\203\022\043\023\065" +
    "\024\064\001\001\000\012\016\201\022\043\023\065\024" +
    "\064\001\001\000\002\001\001\000\014\015\167\016\165" +
    "\022\043\023\065\024\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\143\022\043\023\065\024\064" +
    "\001\001\000\002\001\001\000\004\021\126\001\001\000" +
    "\002\001\001\000\012\016\066\022\043\023\065\024\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\123\022\043\023\065\024\064\001\001" +
    "\000\012\016\122\022\043\023\065\024\064\001\001\000" +
    "\012\016\121\022\043\023\065\024\064\001\001\000\012" +
    "\016\120\022\043\023\065\024\064\001\001\000\012\016" +
    "\117\022\043\023\065\024\064\001\001\000\002\001\001" +
    "\000\012\016\112\022\043\023\065\024\064\001\001\000" +
    "\002\001\001\000\012\016\100\022\043\023\065\024\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\106\016\105\022\043" +
    "\023\065\024\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\111\022\043\023\065\024\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\115\016\105\022\043\023\065" +
    "\024\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\142\001\001\000\012\016\141\022\043\023" +
    "\065\024\064\001\001\000\012\016\134\022\043\023\065" +
    "\024\064\001\001\000\002\001\001\000\012\016\140\022" +
    "\043\023\065\024\064\001\001\000\004\021\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\147\020\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\155\022\043\023" +
    "\065\024\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\163\016\105\022\043\023\065\024\064\001" +
    "\001\000\012\016\161\022\043\023\065\024\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\170\022\043\023\065\024\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\015\175" +
    "\016\165\022\043\023\065\024\064\001\001\000\002\001" +
    "\001\000\012\016\170\022\043\023\065\024\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\205\022\043\023\065\024\064\001\001\000\002\001" +
    "\001\000\012\016\207\022\043\023\065\024\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\217\022\043\023\065\024\064" +
    "\001\001\000\012\016\215\022\043\023\065\024\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\233\022\043\023\065\024\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\024\010\022\011\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	    String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno +
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
        omerrs++;
        if (omerrs>50) {
           System.err.println("More than 50 errors");
           System.exit(1);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {



    /*å¥½å§ï¼åºè¯¥æ¯è¿æ ·çï¼*/
    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // branch ::= OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              branch RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol tp = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 /* æå»ºä¸ä¸ªbranchåæ¯ */
        RESULT = new branch(curr_lineno(), obj, tp, e);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(14/*branch*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // branch_list ::= branch 
            {
              Cases RESULT = null;
		branch b = (branch)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* è¿éæ¯ä¸ä¸ªåæ¯ */
        RESULT = (new Cases(curr_lineno())).appendElement(b);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(13/*branch_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // branch_list ::= branch_list branch 
            {
              Cases RESULT = null;
		Cases bl = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		branch b = (branch)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* è¿éåºç°å¤ä¸ªåæ¯ */
        RESULT = bl.appendElement(b);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(13/*branch_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // let_remainder ::= OBJECTID COLON TYPEID ASSIGN expr COMMA let_remainder 
            {
              let RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol tp = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		let lt = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		
        RESULT = new let(curr_lineno(), obj, tp, e, lt);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*let_remainder*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // let_remainder ::= OBJECTID COLON TYPEID COMMA let_remainder 
            {
              let RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol tp = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		let lt = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* è¿ä¸ªç©æå¶å®çå¦å¾å¾,åµå¥å®å¨æ¯å¤ªåå®³äº! */
        RESULT = new let(curr_lineno(), obj, tp, new no_expr(curr_lineno()), lt);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*let_remainder*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // let_remainder ::= OBJECTID COLON TYPEID ASSIGN expr IN expr 
            {
              let RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol tp = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* with initialize expression! */
        RESULT = new let(curr_lineno(), obj, tp, e1, e2); 
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*let_remainder*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // let_remainder ::= OBJECTID COLON TYPEID IN expr 
            {
              let RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		AbstractSymbol tp = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* without initialize! */
        RESULT = new let(curr_lineno(), obj, tp,
            new no_expr(curr_lineno()), e); 
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(15/*let_remainder*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assign_exp ::= OBJECTID ASSIGN error 
            {
              assign RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(16/*assign_exp*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assign_exp ::= OBJECTID ASSIGN expr 
            {
              assign RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		
        RESULT = new assign(curr_lineno(), obj, e); 
        /* objæ¯AbstractSymbolç±»åï¼èeæ¯Expressionç±»åï¼ */
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(16/*assign_exp*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // block_exp ::= LBRACE error SEMI expr_list RBRACE 
            {
              block RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(17/*block_exp*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // block_exp ::= LBRACE expr_list RBRACE 
            {
              block RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 /* blockè¯­å¥ */
        RESULT = new block(curr_lineno(), el); /* elæ¯expressionsç±»å */
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(17/*block_exp*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // while_exp ::= WHILE expr error expr POOL 
            {
              loop RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(18/*while_exp*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // while_exp ::= WHILE expr LOOP expr error 
            {
              loop RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(18/*while_exp*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // while_exp ::= WHILE expr LOOP expr POOL 
            {
              loop RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 /* whileè¯­å¥ */
        RESULT = new loop(curr_lineno(), e1, e2);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(18/*while_exp*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= error 
            {
              Expression RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 /* æ¬å· */
        RESULT = e; /* è¿éç´æ¥å»ææ¬å·å°±å¯ä»¥äºï¼ */
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= NOT expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* åé */
        RESULT = new comp(curr_lineno(), e);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr EQ expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* ç­äº */
        RESULT = new eq(curr_lineno(), e1, e2);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr LE expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* å°äºç­äº */
        RESULT = new leq(curr_lineno(), e1, e2);
     
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr LT expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* å°äº */
        RESULT = new lt(curr_lineno(), e1, e2);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= NEG expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* è´æ° */
        RESULT = new neg(curr_lineno(), e);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr DIV expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* é¤æ³ */
        RESULT = new divide(curr_lineno(), e1, e2);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr MULT expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* ä¹æ³ */
        RESULT = new mul(curr_lineno(), e1, e2);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr MINUS expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* åæ³ */
        RESULT = new sub(curr_lineno(), e1, e2);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr PLUS expr 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* å æ³ */
        RESULT = new plus(curr_lineno(), e1, e2);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= ISVOID expr 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* isvoidè¯­å¥ */
        RESULT = new isvoid(curr_lineno(), e);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= NEW TYPEID 
            {
              Expression RESULT = null;
		AbstractSymbol tp = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* newè¯­å¥ */
        RESULT = new new_(curr_lineno(), tp);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= CASE expr OF branch_list ESAC 
            {
              Expression RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Cases bl = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 /* caseè¯­å¥ */
        RESULT = new typcase(curr_lineno(), e, bl); /* blæ¯casesç±»å */
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= LET let_remainder 
            {
              Expression RESULT = null;
		let lt = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* letè¯­å¥ */
        RESULT = lt;
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= block_exp 
            {
              Expression RESULT = null;
		block bl = (block)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* blockè¯­å¥ */
        RESULT = bl; /* elæ¯expressionsç±»å */
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= while_exp 
            {
              Expression RESULT = null;
		loop we = (loop)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* whileè¯­å¥ */
        RESULT = we;
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 /* ifè¯­å¥ */
        RESULT = new cond(curr_lineno(), e1, e2, e3);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= OBJECTID LPAREN arg_list RPAREN 
            {
              Expression RESULT = null;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions al = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		
        RESULT = new dispatch(curr_lineno(),
	    new object(curr_lineno(), 
        AbstractTable.idtable.addString("self")), o, al); 
        /* We should fill self in there! */
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr AT TYPEID DOT OBJECTID LPAREN arg_list RPAREN 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions al = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 /* static_dispatchæä½ */
        RESULT = new static_dispatch(curr_lineno(), e1, t, obj, al);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr DOT OBJECTID LPAREN arg_list RPAREN 
            {
              Expression RESULT = null;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expressions al = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 /* Dispatchæä½ */
        RESULT = new dispatch(curr_lineno(), e1, o, al);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= assign_exp 
            {
              Expression RESULT = null;
		assign e = (assign)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* èµå¼æä½ */
        RESULT = e;
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= OBJECTID 
            {
              Expression RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* å®éä¸æçæ¯åéå */
        RESULT = new object(curr_lineno(), obj);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= STR_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol sc = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* è¿éæçæ¯stringå¦ï¼ */
        RESULT = new string_const(curr_lineno(), sc);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= INT_CONST 
            {
              Expression RESULT = null;
		AbstractSymbol ic = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* è¿éæçæ¯intç±»åçå¸¸é! */
        RESULT = new int_const(curr_lineno(), ic);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= BOOL_CONST 
            {
              Expression RESULT = null;
		Boolean bc = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* è¿éæçæ¯boolç±»åçå¸¸éï¼ */
        RESULT = new bool_const(curr_lineno(), bc);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(12/*expr*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr_list ::= error SEMI 
            {
              Expressions RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr_list ::= expr_list expr SEMI 
            {
              Expressions RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 /* expr_listè³å°è¦æä¸ä¸ªexpr */
        RESULT = el.appendElement(e);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr_list ::= expr SEMI 
            {
              Expressions RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		
        RESULT = (new Expressions(curr_lineno())).appendElement(e); /* æ·»å ä¸ä¸ªæ°çåç´  */
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(11/*expr_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // arg_list ::= arg_list COMMA expr 
            {
              Expressions RESULT = null;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		
        RESULT = el.appendElement(e);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*arg_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arg_list ::= 
            {
              Expressions RESULT = null;
		 /* ä¹å¯ä»¥ä¸ºç©º */
        RESULT = new Expressions(curr_lineno());
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*arg_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arg_list ::= expr 
            {
              Expressions RESULT = null;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* arg_listå¯ä»¥æ¯ä¸ä¸ªexpr */
        RESULT = (new Expressions(curr_lineno())).appendElement(e);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(10/*arg_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // formal ::= OBJECTID COLON TYPEID 
            {
              formalc RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		AbstractSymbol tp = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* å®ä¹ä¸ä¸ªformal */
        RESULT = new formalc(curr_lineno(), obj, tp);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(9/*formal*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // formal_list ::= formal 
            {
              Formals RESULT = null;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* ä¸ä¸ªformalä¹æ¯formal_list */
        RESULT = (new Formals(curr_lineno())).appendElement(f);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formal_list ::= 
            {
              Formals RESULT = null;
		
        RESULT = new Formals(curr_lineno()); /* æå»ºä¸ä¸ªæ°çåè¡¨ï¼ */
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formal_list ::= formal_list COMMA formal 
            {
              Formals RESULT = null;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		
        RESULT = fl.appendElement(f);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(8/*formal_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // method ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              method RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		Formals fm = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		AbstractSymbol tp = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		
        RESULT = new method(curr_lineno(), obj, fm, tp, e);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(7/*method*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // attribute ::= OBJECTID COLON error SEMI 
            {
              attr RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*attribute*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // attribute ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              attr RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		AbstractSymbol tp = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		
        RESULT = new attr(curr_lineno(), obj, tp, e);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*attribute*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // attribute ::= OBJECTID COLON TYPEID SEMI 
            {
              attr RESULT = null;
		AbstractSymbol obj = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		AbstractSymbol tp = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 /* åäºè¿ä¹ä¹ï¼ç»äºåå°äºå±æ§å¦ï¼ */
        RESULT = new attr(curr_lineno(), obj, tp, new no_expr(curr_lineno()));
        /* è¿éæ²¡æç¨äºåå§åçexp */
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(6/*attribute*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // feature ::= error SEMI 
            {
              Feature RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // feature ::= method 
            {
              Feature RESULT = null;
		method m = (method)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		
        RESULT = m;
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature ::= attribute 
            {
              Feature RESULT = null;
		attr a = (attr)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		 /* featureçè¿ä¸¤ä¸ªcomponentåªæ¯èµ·å°äºä¸ä¸ªä¸­ä»çä½ç¨ï¼ */
        RESULT = a;
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(5/*feature*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dummy_feature_list ::= feature 
            {
              Features RESULT = null;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		
        RESULT = (new Features(curr_lineno())).appendElement(f);
    
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*dummy_feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dummy_feature_list ::= 
            {
              Features RESULT = null;
		
	    RESULT = new Features(curr_lineno()); /* æå»ºä¸ä¸ªæ°çFeatureï¼ */
	
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*dummy_feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dummy_feature_list ::= dummy_feature_list feature 
            {
              Features RESULT = null;
		Features dfl = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		
	    RESULT = dfl.appendElement(f); /* åæ°åè¡¨ï¼ */
	
              CUP$CoolParser$result = new java_cup.runtime.Symbol(4/*dummy_feature_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class ::= CLASS error SEMI 
            {
              class_c RESULT = null;

              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		
	    RESULT = new class_c(curr_lineno(), n, p, f, curr_filename());
	
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE dummy_feature_list RBRACE SEMI 
            {
              class_c RESULT = null;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		
	    RESULT = new class_c(curr_lineno(), n,
		            AbstractTable.idtable.addString("Object"),
				    f, curr_filename());
	
              CUP$CoolParser$result = new java_cup.runtime.Symbol(3/*class*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		
		RESULT = cl.appendElement(c);
	
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT = null;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		
		RESULT = (new Classes(curr_lineno())).appendElement(c);
	
              CUP$CoolParser$result = new java_cup.runtime.Symbol(2/*class_list*/, RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT = null;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-0)).value;
		
		RESULT = new programc(curr_lineno(), cl);
	
              CUP$CoolParser$result = new java_cup.runtime.Symbol(1/*program*/, RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

